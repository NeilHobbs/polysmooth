library(readxl)
library(dplyr)
library(ggplot2)
#Data from published WHO Cylinder Assays
dataset1 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Underpinning Sustainable Vector")
dataset2 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Watsenga et al. Malar J  2018")
dataset3 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Alemayehuet al. Parasites Vec")
#Estimate number of bioassays (WHO says 25 mosquitoes per assay)
#Round as bioassays are whole events
dataset1$bioassays = round(dataset1$no.mosquitoes/25)
dataset2$bioassays = round(dataset2$no.mosquitoes/25)
#Estimate number of mosquitoes:
dataset3$no.mosquitoes = dataset3$bioassays*25
dataset = rbind(dataset1, dataset2, dataset3)
#https://handbook-5-1.cochrane.org/chapter_7/7_7_3_2_obtaining_standard_deviations_from_standard_errors_and.htm
calculate_SD_from_CI = function(min.ci,
max.ci,
N){
SD = sqrt(N)*(max.ci - min.ci)/3.92
return(SD)
}
dataset$stdev = calculate_SD_from_CI(min.ci = dataset$Lower95CI,
max.ci = dataset$Upper95CI,
N = dataset$bioassays)
ggplot(data = dataset, aes(x=Mortality, y=stdev,
colour = Insecticide,
size = no.mosquitoes))+
geom_point()
devtools::load_all("polyres")
dataset$stdev.scaled = dataset$stdev/100
bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled)
z.stdev = c()
for(i in 1:196){
z.stdev[i] = bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled[i])
}
devtools::load_all("polyres")
devtools::load_all("polyres")
devtools::load_all("C:\Users\neilp\OneDrive - LSTM/polyres")
devtools::load_all("C\Users\neilp\OneDrive - LSTM/polyres")
devtools::load_all("\\C\Users\neilp\OneDrive - LSTM/polyres")
devtools::load_all("\C\Users\neilp\OneDrive - LSTM/polyres")
devtools::load_all("\Users\neilp\OneDrive - LSTM/polyres")
##Required functions:
resistance_to_bioassay_survival = function(maximum.bioassay.survival.proportion = 1,
mean.population.resistance = 900,
michaelis.menten.slope = 1,
half.population.bioassay.survival.resistance = 900,
sd.population.resistance = 10,
nsim = 1000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(sd.population.resistance < 0){stop("sd.population.resistance must be greater than or equal to 0.")}
#Generate a Normal distribution around the population mean of insecticide resistance values
resistance.values = rnorm(n = nsim,
mean = mean.population.resistance,
sd = sd.population.resistance)
#Prevent Insecticide Resistance being less than 0, as this would give survival less than 0.
resistance.values = ifelse(resistance.values < 0, 0, resistance.values)
##Calculate Bioassay Survival (Equation 6)
bioassay.survival.proportion = (maximum.bioassay.survival.proportion *
(resistance.values^michaelis.menten.slope)) /
(half.population.bioassay.survival.resistance +
(resistance.values ^michaelis.menten.slope))
#Prevent survival being less than zero, as this is impossible!
bioassay.survival.proportion = ifelse(bioassay.survival.proportion < 0, 0, bioassay.survival.proportion)
return(mean(bioassay.survival.proportion))
}
bioassay_survival_to_resistance = function(maximum.bioassay.survival.proportion = 1, #must be set to 1 to work properly
michaelis.menten.slope = 1, #must be set to 1 to work properly
half.population.bioassay.survival.resistance = 900,
bioassay.survival = 0.1,
estimate.precision = 0.01,
sd.population.resistance = 10,
nsim = 1000,
minimum.resistance.value = 0,
maximum.resistance.value = 25000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(bioassay.survival > 1 | bioassay.survival < 0){stop("Bioassay survival must be between 0 and 1.")}
if(sd.population.resistance < 0){stop("sd.population.resistance must be greater than or equal to 0.")}
#Warning messages
if(minimum.resistance.value > 10){warning("High input for minimum.resistance.value, bioassay survival could be out of range.")}
if(maximum.resistance.value < 2000){warning("Low input for maximum.bioassay.survival.proportion, bioassay survival could be out of range.")}
if(half.population.bioassay.survival.resistance < minimum.resistance.value |
half.population.bioassay.survival.resistance > maximum.resistance.value){warning("half.population.survival.resistance outside resistance value range")}
while((test.population.resistance = ((minimum.resistance.value + maximum.resistance.value)/2))){
if((maximum.resistance.value - minimum.resistance.value) < estimate.precision)
{return(test.population.resistance)} #When precision level reached return population resistance
else(
if(resistance_to_bioassay_survival(
maximum.bioassay.survival.proportion = maximum.bioassay.survival.proportion,
mean.population.resistance = test.population.resistance,
michaelis.menten.slope = michaelis.menten.slope,
half.population.bioassay.survival.resistance = half.population.bioassay.survival.resistance,
sd.population.resistance = sd.population.resistance,
nsim = nsim) < bioassay.survival) #check if survival less than bioassay survival
{
minimum.resistance.value = test.population.resistance} #TRUE update min value
else(maximum.resistance.value = test.population.resistance))#FALSE update max value
}
}
dataset$stdev.scaled = dataset$stdev/100
bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled)
z.stdev = c()
for(i in 1:196){
z.stdev[i] = bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled[i])
}
dataset$z.stdev = z.stdev
dataset$survival = (100 - dataset$Mortality)/100
dataset_low_survival = dataset%>%
dplyr::filter(survival != 0)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival < 0.1)#maximum value the model is likely to encounter
ggplot(data = dataset, aes(x=survival, y=stdev))+
geom_point()+
geom_smooth(method = "loess")
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev))+
geom_point()+
geom_smooth(method = "lm",
colour = "purple",
fill = "blue",
alpha = 0.2)+
xlab("Survival in WHO Cylinder")+
ylab("Estimated Standard Deviation (z)")+
theme_classic()
ggplot(data = dataset, aes(x=survival, y=stdev))+
geom_point()+
geom_smooth(method = "loess")
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev))+
geom_point()+
geom_smooth(method = "lm",
colour = "purple",
fill = "blue",
alpha = 0.2)+
xlab("Survival in WHO Cylinder")+
ylab("Estimated Standard Deviation (z)")+
theme_classic()
dataset$stdev.scaled = dataset$stdev/100
range(dataset_low_survival$z.stdev)
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev))+
geom_point()+
geom_smooth(method = "lm",
colour = "purple",
fill = "blue",
alpha = 0.2)+
xlab("Survival in WHO Cylinder")+
ylab("Estimated Standard Deviation (z)")+
theme_classic()
#Data from published WHO Cylinder Assays
dataset1 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Underpinning Sustainable Vector")
dataset2 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Watsenga et al. Malar J  2018")
dataset3 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Alemayehuet al. Parasites Vec")
#Estimate number of bioassays (WHO says 25 mosquitoes per assay)
#Round as bioassays are whole events
dataset1$bioassays = round(dataset1$no.mosquitoes/25)
dataset2$bioassays = round(dataset2$no.mosquitoes/25)
#Estimate number of mosquitoes:
dataset3$no.mosquitoes = dataset3$bioassays*25
dataset = rbind(dataset1, dataset2, dataset3)
#https://handbook-5-1.cochrane.org/chapter_7/7_7_3_2_obtaining_standard_deviations_from_standard_errors_and.htm
calculate_SD_from_CI = function(min.ci,
max.ci,
N){
SD = sqrt(N)*(max.ci - min.ci)/3.92
return(SD)
}
dataset$stdev = calculate_SD_from_CI(min.ci = dataset$Lower95CI,
max.ci = dataset$Upper95CI,
N = dataset$bioassays)
ggplot(data = dataset, aes(x=Mortality, y=stdev,
colour = Insecticide,
size = no.mosquitoes))+
geom_point()
dataset1$dataset = "1"
dataset1$dataset = "2"
dataset1$dataset = "3"
dataset = rbind(dataset1, dataset2, dataset3)
#Data from published WHO Cylinder Assays
dataset1 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Underpinning Sustainable Vector")
dataset2 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Watsenga et al. Malar J  2018")
dataset3 = read_excel("WHO Bioassay with SD SE or CI.xlsx",
sheet = "Alemayehuet al. Parasites Vec")
#Estimate number of bioassays (WHO says 25 mosquitoes per assay)
#Round as bioassays are whole events
dataset1$bioassays = round(dataset1$no.mosquitoes/25)
dataset2$bioassays = round(dataset2$no.mosquitoes/25)
#Estimate number of mosquitoes:
dataset3$no.mosquitoes = dataset3$bioassays*25
dataset1$dataset = "1"
dataset2$dataset = "2"
dataset3$dataset = "3"
dataset = rbind(dataset1, dataset2, dataset3)
#https://handbook-5-1.cochrane.org/chapter_7/7_7_3_2_obtaining_standard_deviations_from_standard_errors_and.htm
calculate_SD_from_CI = function(min.ci,
max.ci,
N){
SD = sqrt(N)*(max.ci - min.ci)/3.92
return(SD)
}
dataset$stdev = calculate_SD_from_CI(min.ci = dataset$Lower95CI,
max.ci = dataset$Upper95CI,
N = dataset$bioassays)
geom_point()
ggplot(data = dataset, aes(x=Mortality, y=stdev,
colour = dataset))+
geom_point()
ggplot(data = dataset, aes(x=Mortality, y=stdev,
colour = dataset))+
geom_point()+
theme_classic()
#Convert the standard deviation percentage to a proportion
dataset$stdev.scaled = dataset$stdev/100
#Convert sd(proportion) to sd(z)
z.stdev = c()
for(i in 1:196){
z.stdev[i] = bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled[i])
}
dataset$z.stdev = z.stdev
dataset$survival = (100 - dataset$Mortality)/100
dataset_low_survival = dataset%>%
dplyr::filter(survival != 0)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival < 0.1)#maximum value the model is likely to encounter
ggplot(data = dataset, aes(x=survival, y=stdev))+
geom_point()
ggplot(data = dataset, aes(x=survival, y=z.stdev))+
geom_point()
ggplot(data = dataset, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
ggplot(data = dataset, aes(x=z.stdev))+
geom_histogram()
ggplot(data = dataset, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
dataset_med_survival = dataset%>%
dplyr::filter(survival > 0.3)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival < 0.6)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
#Convert the standard deviation percentage to a proportion
dataset$stdev.scaled = dataset$stdev/100
#Convert sd(proportion) to sd(z)
z.stdev = c()
for(i in 1:196){
z.stdev[i] = bioassay_survival_to_resistance(bioassay.survival = dataset$stdev.scaled[i])
}
dataset$z.stdev = z.stdev
dataset$survival = (100 - dataset$Mortality)/100
dataset_low_survival = dataset%>%
dplyr::filter(survival != 0)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival < 0.1)#maximum value the model is likely to encounter
dataset_med_survival = dataset%>%
dplyr::filter(survival > 0.3)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival < 0.6)#maximum value the model is likely to encounter
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev))+
geom_point()+
geom_smooth(method = "lm",
colour = "purple",
fill = "blue",
alpha = 0.2)+
xlab("Survival in WHO Cylinder")+
ylab("Estimated Standard Deviation (z)")+
theme_classic()
ggplot(data = dataset_low_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()
ggplot(data = dataset, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
dataset_med_survival = dataset%>%
dplyr::filter(survival >= 0.25)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival <= 0.75)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
range(dataset_med_survival$z.stdev)
ggplot(data = dataset_med_survival, aes(x=z.stdev,
colour = dataset))+
geom_histogram()+
theme_classic()
ggplot(data = dataset_med_survival, aes(x=z.stdev))+
geom_histogram()+
theme_classic()
dataset_med_survival = dataset%>%
dplyr::filter(survival >= 0.10)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival <= 0.90)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
ggplot(data = dataset_med_survival, aes(x=z.stdev))+
geom_histogram()+
theme_classic()
range(dataset_med_survival$z.stdev)
dataset_med_survival = dataset%>%
dplyr::filter(survival >= 0.05)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival <= 0.25)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
ggplot(data = dataset_med_survival, aes(x=z.stdev))+
geom_histogram()+
theme_classic()
dataset_med_survival = dataset%>%
dplyr::filter(survival >= 0.25)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival <= 0.75)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
dataset_med_survival = dataset%>%
dplyr::filter(survival >= 0.10)%>% #will behaviour weirdly at mean=0
dplyr::filter(survival <= 0.90)#maximum value the model is likely to encounter
ggplot(data = dataset_med_survival, aes(x=survival, y=z.stdev,
colour = dataset))+
geom_point()+
theme_classic()
range(dataset$z.stdev)
