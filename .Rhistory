library(devtools)
check()
load_all()
polyIRM::convert_bioassay_survival_to_resistance_score()
polyIRM::convert_resistance_score_to_bioassay_survival()
calculate_half_population_survival = function(desired.polygenic.resistance.score,
desired.survival.proportion,
maximum.bioassay.survival.proportion = 1,
michaelis.menten.slope = 1,
estimate.precision = 0.001,
minimum.resistance.value = 0,
maximum.resistance.value = 25000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(desired.survival.proportion > 1 | desired.survival.proportion < 0){stop("desired.survival.proportion must be between 0 and 1.")}
#Warning messages
if(minimum.resistance.value > 50){warning("High input for minimum.resistance.value, bioassay survival could be out of range.")}
if(maximum.resistance.value < 2000){warning("Low input for maximum.bioassay.survival.proportion, bioassay survival could be out of range.")}
while((half.population.survival.value = ((minimum.resistance.value + maximum.resistance.value)/2))){
if((maximum.resistance.value - minimum.resistance.value) < estimate.precision)
{return(half.population.survival.value)} #When precision level reached return population resistance
else(
if(convert_resistance_score_to_bioassay_survival(
maximum.bioassay.survival.proportion = maximum.bioassay.survival.proportion,
mean.population.resistance = desired.resistance,
michaelis.menten.slope = michaelis.menten.slope,
half.population.bioassay.survival.resistance = half.population.survival.value) > desired.survival.proportion) #check if survival
{
minimum.resistance.value = half.population.survival.value}
else(maximum.resistance.value = half.population.survival.value))
}
}
calculate_half_population_survival()
calculate_half_population_survival = function(desired.polygenic.resistance.score = 100,
desired.survival.proportion = 0.1,
maximum.bioassay.survival.proportion = 1,
michaelis.menten.slope = 1,
estimate.precision = 0.001,
minimum.resistance.value = 0,
maximum.resistance.value = 25000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(desired.survival.proportion > 1 | desired.survival.proportion < 0){stop("desired.survival.proportion must be between 0 and 1.")}
#Warning messages
if(minimum.resistance.value > 50){warning("High input for minimum.resistance.value, bioassay survival could be out of range.")}
if(maximum.resistance.value < 2000){warning("Low input for maximum.bioassay.survival.proportion, bioassay survival could be out of range.")}
while((half.population.survival.value = ((minimum.resistance.value + maximum.resistance.value)/2))){
if((maximum.resistance.value - minimum.resistance.value) < estimate.precision)
{return(half.population.survival.value)} #When precision level reached return population resistance
else(
if(convert_resistance_score_to_bioassay_survival(
maximum.bioassay.survival.proportion = maximum.bioassay.survival.proportion,
mean.population.resistance = desired.resistance,
michaelis.menten.slope = michaelis.menten.slope,
half.population.bioassay.survival.resistance = half.population.survival.value) > desired.survival.proportion) #check if survival
{
minimum.resistance.value = half.population.survival.value}
else(maximum.resistance.value = half.population.survival.value))
}
}
calculate_half_population_survival()
calculate_half_population_survival = function(desired.polygenic.resistance.score = 100,
desired.survival.proportion = 0.1,
maximum.bioassay.survival.proportion = 1,
michaelis.menten.slope = 1,
estimate.precision = 0.001,
minimum.resistance.value = 0,
maximum.resistance.value = 25000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(desired.survival.proportion > 1 | desired.survival.proportion < 0){stop("desired.survival.proportion must be between 0 and 1.")}
#Warning messages
if(minimum.resistance.value > 50){warning("High input for minimum.resistance.value, bioassay survival could be out of range.")}
if(maximum.resistance.value < 2000){warning("Low input for maximum.bioassay.survival.proportion, bioassay survival could be out of range.")}
while((half.population.survival.value = ((minimum.resistance.value + maximum.resistance.value)/2))){
if((maximum.resistance.value - minimum.resistance.value) < estimate.precision)
{return(half.population.survival.value)} #When precision level reached return population resistance
else(
if(convert_resistance_score_to_bioassay_survival(
maximum.bioassay.survival.proportion = maximum.bioassay.survival.proportion,
trait.mean = desired.resistance,
michaelis.menten.slope = michaelis.menten.slope,
half.population.bioassay.survival.resistance = half.population.survival.value) > desired.survival.proportion) #check if survival
{
minimum.resistance.value = half.population.survival.value}
else(maximum.resistance.value = half.population.survival.value))
}
}
calculate_half_population_survival()
calculate_half_population_survival = function(desired.polygenic.resistance.score = 100,
desired.survival.proportion = 0.1,
maximum.bioassay.survival.proportion = 1,
michaelis.menten.slope = 1,
estimate.precision = 0.001,
minimum.resistance.value = 0,
maximum.resistance.value = 25000){
#Error Messages
if(michaelis.menten.slope != 1){stop("michaelis.menten.slope must equal 1")}
if(maximum.bioassay.survival.proportion != 1){stop("maximum.bioassay.survival.proportion must equal 1.")}
if(desired.survival.proportion > 1 | desired.survival.proportion < 0){stop("desired.survival.proportion must be between 0 and 1.")}
#Warning messages
if(minimum.resistance.value > 50){warning("High input for minimum.resistance.value, bioassay survival could be out of range.")}
if(maximum.resistance.value < 2000){warning("Low input for maximum.bioassay.survival.proportion, bioassay survival could be out of range.")}
while((half.population.survival.value = ((minimum.resistance.value + maximum.resistance.value)/2))){
if((maximum.resistance.value - minimum.resistance.value) < estimate.precision)
{return(half.population.survival.value)} #When precision level reached return population resistance
else(
if(convert_resistance_score_to_bioassay_survival(
maximum.bioassay.survival.proportion = maximum.bioassay.survival.proportion,
trait.mean = desired.polygenic.resistance.score,
michaelis.menten.slope = michaelis.menten.slope,
half.population.bioassay.survival.resistance = half.population.survival.value) > desired.survival.proportion) #check if survival
{
minimum.resistance.value = half.population.survival.value}
else(maximum.resistance.value = half.population.survival.value))
}
}
calculate_half_population_survival()
load_all()
load_all()
plot_bioassay_survival_to_resistance()
check()
plot_bioassay_survival_to_resistance()
load_all()
plot_bioassay_survival_to_resistance()
load_all()
plot_bioassay_survival_to_resistance()
load_all()
plot_bioassay_survival_to_resistance()
load_all()
plot_bioassay_survival_to_resistance()
load_all()
plot_resistance_to_bioassay_survival()
load_all()
plot_resistance_to_bioassay_survival()
load_all()
plot_resistance_to_bioassay_survival()
load_all()
plot_resistance_to_bioassay_survival()
calculate_current_insecticide_efficacy = function(generations.since.deployment,
threshold.generations,
initial.insecticide.efficacy,
base.efficacy.decay.rate,
rapid.decay.rate){
if(generations.since.deployment =< threshold.generations){
current.insecticide.efficacy = initial.insecticide.efficacy * exp(-generations.since.deployment * base.efficacy.decay.rate)
}
if(threshold.generations < generations.since.deployment){
first.decay =  initial.insecticide.efficacy * exp(-threshold.generations * base.efficacy.decay.rate)
current.insecticide.efficacy = first.decay * exp(-(generations.since.deployment-threshold.generations)^2 * rapid.decay.rate)
}
return(current.insecticide.efficacy)
}
calculate_current_insecticide_efficacy = function(generations.since.deployment,
threshold.generations,
initial.insecticide.efficacy,
base.efficacy.decay.rate,
rapid.decay.rate){
if(generations.since.deployment <= threshold.generations){
current.insecticide.efficacy = initial.insecticide.efficacy * exp(-generations.since.deployment * base.efficacy.decay.rate)
}
if(threshold.generations < generations.since.deployment){
first.decay =  initial.insecticide.efficacy * exp(-threshold.generations * base.efficacy.decay.rate)
current.insecticide.efficacy = first.decay * exp(-(generations.since.deployment-threshold.generations)^2 * rapid.decay.rate)
}
return(current.insecticide.efficacy)
}
calculate_current_insecticide_efficacy(generations.since.deployment = 3,
threshold.generations = 10,
initial.insecticide.efficacy = 1,
base.efficacy.decay.rate = 0.05,
rapid.decay.rate = 0.5)
calculate_current_insecticide_efficacy(generations.since.deployment = 3,
threshold.generations = 10,
initial.insecticide.efficacy = 1,
base.efficacy.decay.rate = 0.005,
rapid.decay.rate = 0.5)
calculate_current_insecticide_efficacy(generations.since.deployment = 14,
threshold.generations = 10,
initial.insecticide.efficacy = 1,
base.efficacy.decay.rate = 0.005,
rapid.decay.rate = 0.5)
library(devtools)
library(roxygen2)
